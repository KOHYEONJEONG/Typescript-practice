// 배열-----------------------------------------
let numArr: number[] = [1, 2, 3];
let strArr: string[] = ["a", "b"];
let boolArr: Array<boolean> = [true, false, true];

// 배열에 들어가는 요소들의 타입이 다양할 경우(= 유니온 타입)
let multiArr: (number | string)[] = [1, "hello"]; //string | number (문자열, 정수 둘다 가능)

//다차원 배열의 타입을 정의하는 방법
let doubleArr: number[][] = [
  [1, 2, 3],
  [4, 5],
];

//튜플-----------------------------------------
//길이와 타입이 고정된 배열
let tup: [number, number] = [1, 2];
// tup1 = [1,2,3];
// tup1 = ["1","2"];

// 튜플도 아래처럼 사용 가능하다. (배열 메소드 사용시 튜플의 길이 제한이 발동하지 않는다)
tup.push[4]; //3번쨰 요소가 생겨도 오류가 안나는 이유는 '배열에서 제공하는 함수'는 오류가 나지 않는다..(왜? js 배열이라고 생각하기 때문. 튜플에서 배열 메소드 사용 시 각별히 주의해서 사용하자)
tup.pop(); //위 주석과 동일하다.

let tup2: [number, string, boolean] = [1, "2", true];

//튜플은 언제 사용하는게 좋나? 아래처럼 규칙적인 순서를 써야할때 주로 사용한다.
// 튜플 배열 선언: [자료형,자료형][]
const users: [string, number][] = [
  ["고현정", 1],
  ["고현정", 2],
  ["고현정", 3],
  ["고현정", 4],
  // [5,"고현정"], 튜플을 사용함으로 써 규칙 위반 방지 가능
];
